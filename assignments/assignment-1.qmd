---
title: "Assignment 1"
---

My first assignment has three parts.

## (a)

[R vs Python](https://www.youtube.com/watch?v=4lcwTGA7MZw) This the video I have chosen.

#### Brief Summary:

The video compares R and Python for data analysis. It highlights that R is known for its simplicity, making it easy for beginners to perform basic data analysis tasks with minimal code. However, it can be challenging to master advanced features. Python, on the other hand, excels at importing data from various sources and offers the pandas library for quick data manipulation. R is optimized for statistical analysis and modeling, while Python has libraries like NumPy for data modeling. In terms of visualization, R has strong capabilities with its base graphics and ggplot2 for advanced plots. Typically, organizations use both languages, starting with R for initial analysis and transitioning to Python for deploying data products.

## (b)

```{r}
# R program to add two numbers
numb1 <- 8
numb2 <- 4

# Adding two numbers 
sum <- numb1 + numb2 

print(paste("The sum is", sum))
```

``` python
# Python program to add two numbers

numb1 = 8
numb2 = 4

# Adding two numbers 
sum = numb1 + numb2 

# Printing the result 
print("The sum is", sum) 
```

```{r}
#Create a vector:
my_vec <- c(1, 2, 3, 4, 5, 6, 7, 8)
print(my_vec[seq(2, length(my_vec), 3)])
```

``` python
#Create a list:
my_vec = [1, 2, 3, 4, 5, 6, 7, 8]
print(my_vec[1::3])
```

```{r}
#Define a function:
my_sum <- function(x, y){
  x <- x + 1
  y <- y + 1
  return(x + y)
}
#Test the function
print(my_sum(1, 2))
```

``` python
#Define a function:
def my_sum(x, y):
  x = x + 1
  y = y + 1
  return x + y
#
#Test the function
print(my_sum(1, 2))
```

## (c)

```{r}
library(dslabs)
data("na_example")
na_example
# Total number of NAs in the data frame:
sum(is.na(na_example))
no_na <- ifelse(is.na(na_example), 0, na_example)
no_na
# Total number of NAs in the new data frame:
sum(is.na(no_na))
```
